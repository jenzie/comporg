   1 0000               # File: skyscrapers.asm
   2 0000               # Author: Jenny Zhen
   3 0000               # Description: Solves a Skyscrapers puzzle.
   4 0000               # Arguments:
   5 0000               # 	
   6 0000               #
   7 0000               # Returns:
   8 0000               #
   9 0000               
  10 0000               # CONSTANTS
  11 0000               MIN_SIZE = 3
  12 0000               MAX_SIZE = 8
  13 0000               MIN_HEIGHT = 1
  14 0000               
  15 0000               # syscall codes
  16 0000               PRINT_INT = 1
  17 0000               PRINT_STRING = 4
  18 0000               READ_INT = 5
  19 0000               EXIT = 10
  20 0000               
  21 0000               #
  22 0000               # Name:		Data areas
  23 0000               #
  24 0000               # Description:	Data for the program, including: board data, puzzle messages, 
  25 0000               #		and error messages.
  26 0000               #
  27 0000               
  28 0000               	.data
  29 0000               	.align 2
  30 0000               	
  31 0000               board_size:
  32 0000 00000000		.space	4		# room for board size, size for 1 word
  33 0004               
  34 0004               board_array:
  35 0004 00000000		.space	8*8*4	# room for input values, size for 8 by 8 words
          00000000
          00000000
          00000000
          00000000
          00000000
  36 0104               	
  37 0104               board_copy:
  38 0104 00000000		.space	8*8*4	# room for input values, size for 8 by 8 words
          00000000
          00000000
          00000000
          00000000
          00000000
  39 0204               	
  40 0204               north_array:		# room for input values, size for 8 words
  41 0204 00000000		.space	8*4	
          00000000
          00000000
          00000000
          00000000
          00000000
  42 0224               
  43 0224               east_array:			# room for input values, size for 8 words
  44 0224 00000000		.space	8*4	
          00000000
          00000000
          00000000
          00000000
          00000000
  45 0244               
  46 0244               south_array:		# room for input values, size for 8 words
  47 0244 00000000		.space	8*4	
          00000000
          00000000
          00000000
          00000000
          00000000
  48 0264               
  49 0264               west_array:			# room for input values, size for 8 words
  50 0264 00000000		.space	8*4	
          00000000
          00000000
          00000000
          00000000
          00000000
  51 0284               	
  52 0284               	#
  53 0284               	# the print constants for the code
  54 0284               	#
  55 0284               	.align 0
  56 0284               
  57 0284               banner_msg:	
  58 0284 2A2A2A2A		.ascii	"*******************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A0A
  59 0298 2A2A2020		.ascii	"**  SKYSCRAPERS  **\n"
          534B5953
          43524150
          45525320
          202A2A0A
  60 02ac 2A2A2A2A		.asciiz	"*******************\n\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A0A
          0A00    
  61 02c2               
  62 02c2               initial_msg:	
  63 02c2 496E6974		.asciiz	"Initial Puzzle\n\n"
          69616C20
          50757A7A
          6C650A0A
          00      
  64 02d3               	
  65 02d3               final_msg:
  66 02d3 46696E61		.asciiz "Final Puzzle\n\n"
          6C205075
          7A7A6C65
          0A0A00  
  67 02e2               	
  68 02e2               single_row_separator:
  69 02e2 2B2D2D2D		.asciiz "+---"
          00      
  70 02e7               
  71 02e7               single_col_separator:
  72 02e7 7C00    		.asciiz "|"
  73 02e9               	
  74 02e9               row_terminator:
  75 02e9 2B0A00  		.asciiz "+\n"
  76 02ec               
  77 02ec               space:
  78 02ec 2000    		.asciiz " "
  79 02ee               	
  80 02ee               two_spaces:
  81 02ee 202000  		.asciiz "  "
  82 02f1               	
  83 02f1               three_spaces:
  84 02f1 20202000		.asciiz "   "
  85 02f5               	
  86 02f5               four_spaces:
  87 02f5 20202020		.asciiz	"    "
          00      
  88 02fa               	
  89 02fa               new_line:
  90 02fa 0A00    		.asciiz "\n"
  91 02fc               	
  92 02fc               invalid_board_size:
  93 02fc 496E7661		.asciiz "Invalid board size, Skyscrapers terminating\n"
          6C696420
          626F6172
          64207369
          7A652C20
          536B7973
  94 0329               	
  95 0329               illegal_input:
  96 0329 496C6C65		.asciiz "Illegal input value, Skyscrapers terminating\n"
          67616C20
          696E7075
          74207661
          6C75652C
          20536B79
  97 0357               	
  98 0357               invalid_num_fv:
  99 0357 496E7661		.asciiz "Invalid number of fixed values, Skyscrapers terminating\n"
          6C696420
          6E756D62
          6572206F
          66206669
          78656420
 100 0390               	
 101 0390               illegal_fv_input:
 102 0390 496C6C65		.asciiz "Illegal fixed input values, Skyscrapers terminating\n"
          67616C20
          66697865
          6420696E
          70757420
          76616C75
 103 03c5               	
 104 03c5               impossible_puzzle:
 105 03c5 496D706F		.asciiz "Impossible Puzzle\n\n"
          73736962
          6C652050
          757A7A6C
          650A0A00
 106 03d9               	
 107 0000               	.text							# this is program code
 108 0000               	.align	2						# instructions must be on word boundaries
 109 0000               	
 110 0000               									# global labels
 111 0000               	.globl	main					# from skyscrapers.asm
 112 0000               	.globl	print_banner			# from printers.asm
 113 0000               	.globl	print_initial_puzzle	# from printers.asm
 114 0000               	.globl	print_final_puzzle		# from printers.asm
 115 0000               	
 116 0000               #
 117 0000               # Name:		MAIN PROGRAM
 118 0000               #
 119 0000               # Description:	Main logic for the program.
 120 0000               #
 121 0000               #	This program reads in numbers and places them in arrays representing the 
 122 0000               #	skyscrapers game board. Once the reading is done, a brute-force method is 
 123 0000               #	applied to attempt to solve the puzzle.
 124 0000               #
 125 0000               	
 126 0000               main:
 127 0000 34020005		li	$v0, READ_INT		# read in the value of the first integer parameter
 128 0004 0000000C		syscall
 129 0008               	
 130 0008 3C080000		la	$t0, board_size
     000c 35080000
 131 0010 AD020000		sw	$v0, 0($t0)			# store the value of the first param, board size
 132 0014               	
 133 0014 0040B821		move	$s7, $v0		# store the board size into $s7 for easier access
 134 0018 2AE10003		blt	$s7, MIN_SIZE, error_board_size				# validate input
     001c 1420001D
 135 0020 2AE10009		bgt	$s7, MAX_SIZE, error_board_size				# validate input
     0024 1020001B
 136 0028               	
 137 0028 3C040000		la	$a0, north_array	# store the address of the pointer to north_array
     002c 34840000
 138 0030 0C000043		jal	parse_board_perim	# parse the input for north
 139 0034 3C040000		la	$a0, east_array		# store the address of the pointer to east_array
     0038 34840000
 140 003c 0C000043		jal	parse_board_perim	# parse the input for east
 141 0040 3C040000		la	$a0, south_array	# store the address of the pointer to south_array
     0044 34840000
 142 0048 0C000043		jal	parse_board_perim	# parse the input for south
 143 004c 3C040000		la	$a0, west_array		# store the address of the pointer to west_array
     0050 34840000
 144 0054 0C000043		jal	parse_board_perim	# parse the input for west
 145 0058               	
 146 0058 34020005		li	$v0, READ_INT		# read in the value of the next integer parameter
 147 005c 0000000C		syscall
 148 0060               	
 149 0060 00403021		move	$a2, $v0		# store the number of fixed values
 150 0064 00C0082A		blt	$a2, $zero, error_num_fv					# validate input
     0068 14200016
 151 006c               	
 152 006c 3C040000		la	$a0, board_array	# store the address of the pointer to board_array
     0070 34840000
 153 0074 3C050000		la	$a1, board_copy		# store the address of the pointer to board_copy
     0078 34A50000
 154 007c 0C000050		jal	parse_board			# parse the input for board
 155 0080               	
 156 0080 0C000000		jal	print_banner
 157 0084 0C000000		jal	print_initial_puzzle
 158 0088 0C000000		jal	print_final_puzzle
 159 008c               	
 160 008c 3402000A		li	$v0, EXIT
 161 0090 0000000C		syscall							# terminate program
 162 0094               	
 163 0094               error_board_size:
 164 0094 34020004		li	$v0, PRINT_STRING			# load the syscall code
 165 0098 3C040000		la	$a0, invalid_board_size		# load the address to the string
     009c 34840000
 166 00a0 0000000C		syscall							# tell the OS to print
 167 00a4 3402000A		li	$v0, EXIT
 168 00a8 0000000C		syscall							# terminate program
 169 00ac               	
 170 00ac               error_input_value:
 171 00ac 34020004		li	$v0, PRINT_STRING			# load the syscall code
 172 00b0 3C040000		la	$a0, illegal_input			# load the address to the string
     00b4 34840000
 173 00b8 0000000C		syscall							# tell the OS to print
 174 00bc 3402000A		li	$v0, EXIT
 175 00c0 0000000C		syscall							# terminate program
 176 00c4               	
 177 00c4               error_num_fv:
 178 00c4 34020004		li	$v0, PRINT_STRING			# load the syscall code
 179 00c8 3C040000		la	$a0, invalid_num_fv			# load the address to the string
     00cc 34840000
 180 00d0 0000000C		syscall							# tell the OS to print
 181 00d4 3402000A		li	$v0, EXIT
 182 00d8 0000000C		syscall							# terminate program
 183 00dc               	
 184 00dc               error_fv_input:
 185 00dc 34020004		li	$v0, PRINT_STRING			# load the syscall code
 186 00e0 3C040000		la	$a0, illegal_fv_input		# load the address to the string
     00e4 34840000
 187 00e8 0000000C		syscall							# tell the OS to print
 188 00ec 3402000A		li	$v0, EXIT
 189 00f0 0000000C		syscall							# terminate program
 190 00f4               	
 191 00f4               error_impossible_puzzle:
 192 00f4 34020004		li	$v0, PRINT_STRING			# load the syscall code
 193 00f8 3C040000		la	$a0, impossible_puzzle		# load the address to the string
     00fc 34840000
 194 0100 0000000C		syscall							# tell the OS to print
 195 0104 3402000A		li	$v0, EXIT
 196 0108 0000000C		syscall							# terminate program
 197 010c               
 198 010c               parse_board_perim:
 199 010c 34080000		li	$t0, 0						# counter for the number of values read in
 200 0110               	
 201 0110               pbp_loop:
 202 0110 1117000A		beq	$t0, $s7, pbp_done
 203 0114 34020005		li	$v0, READ_INT				# read in a single perimeter value
 204 0118 0000000C		syscall
 205 011c               	
 206 011c 0040082A		blt	$v0, $zero, error_input_value				# validate input
     0120 1420FFE2
 207 0124 02E2082A		bgt	$v0, $s7, error_input_value					# validate input
     0128 1420FFE0
 208 012c               	
 209 012c AC820000		sw	$v0, 0($a0)					# store the perimeter value
 210 0130 20840004		addi	$a0, $a0, 4				# move address to base pointer over
 211 0134 21080001		addi	$t0, $t0, 1				# increment counter
 212 0138 08000044		j	pbp_loop
 213 013c               
 214 013c               pbp_done:
 215 013c 03E00008		jr	$ra
 216 0140               	
 217 0140               parse_board:
 218 0140 34080000		li	$t0, 0						# counter for the number of values read in
 219 0144               	
 220 0144               pb_loop:
 221 0144 11060023		beq	$t0, $a2, pb_done			# no fixed values to be read
 222 0148               
 223 0148               	# to-do: change the bgt s7 to s7 - 1
 224 0148               	
 225 0148 00009821		move	$s3, $zero				# clear $s3
 226 014c               	
 227 014c 34020005		li	$v0, READ_INT				# read in the row
 228 0150 0000000C		syscall
 229 0154 0040082A		blt	$v0, $zero, error_fv_input					# validate input
     0158 1420FFE0
 230 015c 02E2082A		bgt	$v0, $s7, error_fv_input					# validate input
     0160 1420FFDE
 231 0164 00408021		move	$s0, $v0				# store the row value
 232 0168               	
 233 0168 34020005		li	$v0, READ_INT				# read in the col value
 234 016c 0000000C		syscall
 235 0170 0040082A		blt	$v0, $zero, error_fv_input					# validate input
     0174 1420FFD9
 236 0178 02E2082A		bgt	$v0, $s7, error_fv_input					# validate input
     017c 1420FFD7
 237 0180 00408821		move	$s1, $v0				# store the col value
 238 0184               	
 239 0184 34020005		li	$v0, READ_INT				# read in the fixed value
 240 0188 0000000C		syscall
 241 018c 28410001		blt	$v0, MIN_HEIGHT, error_fv_input				# validate input
     0190 1420FFD2
 242 0194 02E2082A		bgt	$v0, $s7, error_fv_input					# validate input
     0198 1420FFD0
 243 019c 00409021		move	$s2, $v0				# store the fixed value
 244 01a0               	
 245 01a0 02170018		mul	$s3, $s0, $s7
     01a4 00009812
 246 01a8 02719820		add	$s3, $s3, $s1				# get the index of the piece
 247 01ac               	
 248 01ac 34190004		li	$t9, 4						# 4 bytes in a word
 249 01b0 02790018		mul	$s3, $s3, $t9				# get the displacement/offset
     01b4 00009812
 250 01b8               	
 251 01b8               									# store the value into the board_array
 252 01b8 0264C820		add	$t9, $s3, $a0				# move the pointer over
 253 01bc AF320000		sw	$s2, 0($t9)					# store the fixed value
 254 01c0               	
 255 01c0               									# store the value into the board_copy
 256 01c0 0264C822		sub	$t9, $s3, $a0				# unmove the pointer over
 257 01c4 0265C820		add	$t9, $s3, $a1				# move the pointer over
 258 01c8 AF320000		sw	$s2, 0($t9)					# store the fixed value
 259 01cc               	
 260 01cc 21080001		addi	$t0, $t0, 1				# increment counter
 261 01d0 08000051		j	pb_loop
 262 01d4               	
 263 01d4               pb_done:
 264 01d4 03E00008		jr	$ra


EXIT                     = 0000000A   
MAX_SIZE                 = 00000008   
MIN_HEIGHT               = 00000001   
MIN_SIZE                 = 00000003   
PRINT_INT                = 00000001   
PRINT_STRING             = 00000004   
READ_INT                 = 00000005   
banner_msg                 00000284 R  data 
board_array                00000004 R  data 
board_copy                 00000104 R  data 
board_size                 00000000 R  data 
east_array                 00000224 R  data 
error_board_size           00000094 R  text 
error_fv_input             000000DC R  text 
error_impossible_puzzle    000000F4 R  text 
error_input_value          000000AC R  text 
error_num_fv               000000C4 R  text 
final_msg                  000002D3 R  data 
four_spaces                000002F5 R  data 
illegal_fv_input           00000390 R  data 
illegal_input              00000329 R  data 
impossible_puzzle          000003C5 R  data 
initial_msg                000002C2 R  data 
invalid_board_size         000002FC R  data 
invalid_num_fv             00000357 R  data 
main                       00000000 RG text 
new_line                   000002FA R  data 
north_array                00000204 R  data 
parse_board                00000140 R  text 
parse_board_perim          0000010C R  text 
pb_done                    000001D4 R  text 
pb_loop                    00000144 R  text 
pbp_done                   0000013C R  text 
pbp_loop                   00000110 R  text 
print_banner               ******** XG
print_final_puzzle         ******** XG
print_initial_puzzle       ******** XG
row_terminator             000002E9 R  data 
single_col_separator       000002E7 R  data 
single_row_separator       000002E2 R  data 
south_array                00000244 R  data 
space                      000002EC R  data 
three_spaces               000002F1 R  data 
two_spaces                 000002EE R  data 
west_array                 00000264 R  data 
