   1 0000               # File: skyscrapers.asm
   2 0000               # Author: Jenny Zhen
   3 0000               # Description: Solves a Skyscrapers puzzle.
   4 0000               # Arguments:
   5 0000               # 	
   6 0000               #
   7 0000               # Returns:
   8 0000               #
   9 0000               
  10 0000               # CONSTANTS
  11 0000               MIN_SIZE = 3
  12 0000               MAX_SIZE = 8
  13 0000               MIN_HEIGHT = 1
  14 0000               
  15 0000               # syscall codes
  16 0000               PRINT_INT = 1
  17 0000               PRINT_STRING = 4
  18 0000               READ_INT = 5
  19 0000               EXIT = 10
  20 0000               
  21 0000               #
  22 0000               # Name:		Data areas
  23 0000               #
  24 0000               # Description:	Data for the program, including: board data, puzzle messages, 
  25 0000               #		and error messages.
  26 0000               #
  27 0000               
  28 0000               	.data
  29 0000               	.align 2
  30 0000               	
  31 0000               board_size:
  32 0000 00000000		.space	4		# room for board size, size for 1 word
  33 0004               
  34 0004               board_array:
  35 0004 00000000		.space	8*8*4	# room for input values, size for 8 by 8 words
          00000000
          00000000
          00000000
          00000000
          00000000
  36 0104               	
  37 0104               north_array:		# room for input values, size for 8 words
  38 0104 00000000		.space	8*4	
          00000000
          00000000
          00000000
          00000000
          00000000
  39 0124               
  40 0124               east_array:			# room for input values, size for 8 words
  41 0124 00000000		.space	8*4	
          00000000
          00000000
          00000000
          00000000
          00000000
  42 0144               
  43 0144               south_array:		# room for input values, size for 8 words
  44 0144 00000000		.space	8*4	
          00000000
          00000000
          00000000
          00000000
          00000000
  45 0164               
  46 0164               west_array:			# room for input values, size for 8 words
  47 0164 00000000		.space	8*4	
          00000000
          00000000
          00000000
          00000000
          00000000
  48 0184               	
  49 0184               	#
  50 0184               	# the print constants for the code
  51 0184               	#
  52 0184               	.align 0
  53 0184               
  54 0184               banner_msg:	
  55 0184 2A2A2A2A		.ascii	"*******************\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A0A
  56 0198 2A2A2053		.ascii "** SKYSCRAPERS **\n"
          4B595343
          52415045
          5253202A
          2A0A    
  57 01aa 2A2A2A2A		.asciiz	"*******************\n\n"
          2A2A2A2A
          2A2A2A2A
          2A2A2A2A
          2A2A2A0A
          0A00    
  58 01c0               
  59 01c0               initial_msg:	
  60 01c0 496E6974		.asciiz	"Initial Puzzle\n\n"
          69616C20
          50757A7A
          6C650A0A
          00      
  61 01d1               	
  62 01d1               final_msg:
  63 01d1 46696E61		.asciiz "Final Puzzle\n\n"
          6C205075
          7A7A6C65
          0A0A00  
  64 01e0               	
  65 01e0               single_row_separator:
  66 01e0 2B2D2D00		.asciiz "+--"
  67 01e4               
  68 01e4               single_col_separator:
  69 01e4 7C00    		.asciiz "|"
  70 01e6               	
  71 01e6               row_terminator:
  72 01e6 2B0A00  		.asciiz "+\n"
  73 01e9               
  74 01e9               space:
  75 01e9 2000    		.asciiz " "
  76 01eb               	
  77 01eb               two_spaces:
  78 01eb 202000  		.asciiz "  "
  79 01ee               	
  80 01ee               three_spaces:
  81 01ee 20202000		.asciiz "   "
  82 01f2               	
  83 01f2               four_spaces:
  84 01f2 20202020		.asciiz	"    "
          00      
  85 01f7               	
  86 01f7               new_line:
  87 01f7 0A00    		.asciiz "\n"
  88 01f9               	
  89 01f9               invalid_board_size:
  90 01f9 496E7661		.asciiz "Invalid board size, Skyscrapers terminating\n"
          6C696420
          626F6172
          64207369
          7A652C20
          536B7973
  91 0226               	
  92 0226               illegal_input:
  93 0226 496C6C65		.asciiz "Illegal input value, Skyscrapers terminating\n"
          67616C20
          696E7075
          74207661
          6C75652C
          20536B79
  94 0254               	
  95 0254               invalid_num_fv:
  96 0254 496E7661		.asciiz "Invalid number of fixed values, Skyscrapers terminating\n"
          6C696420
          6E756D62
          6572206F
          66206669
          78656420
  97 028d               	
  98 028d               illegal_fv_input:
  99 028d 496C6C65		.asciiz "Illegal fixed input values, Skyscrapers terminating\n"
          67616C20
          66697865
          6420696E
          70757420
          76616C75
 100 02c2               	
 101 02c2               impossible_puzzle:
 102 02c2 496D706F		.asciiz "Impossible Puzzle\n\n"
          73736962
          6C652050
          757A7A6C
          650A0A00
 103 02d6               	
 104 0000               	.text							# this is program code
 105 0000               	.align	2						# instructions must be on word boundaries
 106 0000               	
 107 0000               									# global labels
 108 0000               	.globl	main					# from skyscrapers.asm
 109 0000               	.globl	print_banner			# from printers.asm
 110 0000               	.globl	print_initial_puzzle	# from printers.asm
 111 0000               	.globl	print_final_puzzle		# from printers.asm
 112 0000               	
 113 0000               #
 114 0000               # Name:		MAIN PROGRAM
 115 0000               #
 116 0000               # Description:	Main logic for the program.
 117 0000               #
 118 0000               #	This program reads in numbers and places them in arrays representing the 
 119 0000               #	skyscrapers game board. Once the reading is done, a brute-force method is 
 120 0000               #	applied to attempt to solve the puzzle.
 121 0000               #
 122 0000               	
 123 0000               main:
 124 0000               	
 125 0000 34020005		li	$v0, READ_INT		# read in the value of the first integer parameter
 126 0004 0000000C		syscall
 127 0008               	
 128 0008 3C080000		la	$t0, board_size
     000c 35080000
 129 0010 AD020000		sw	$v0, 0($t0)			# store the value of the first param, board size
 130 0014               	
 131 0014 0040B821		move	$s7, $v0		# store the board size into $s7 for easier access
 132 0018 2AE10003		blt	$s7, MIN_SIZE, error_board_size				# validate input
     001c 1420001B
 133 0020 2AE10009		bgt	$s7, MAX_SIZE, error_board_size				# validate input
     0024 10200019
 134 0028               	
 135 0028 3C040000		la	$a0, north_array	# store the address of the pointer to north_array
     002c 34840000
 136 0030 0C000041		jal	parse_board_perim	# parse the input for north
 137 0034 3C040000		la	$a0, east_array		# store the address of the pointer to east_array
     0038 34840000
 138 003c 0C000041		jal	parse_board_perim	# parse the input for east
 139 0040 3C040000		la	$a0, south_array	# store the address of the pointer to south_array
     0044 34840000
 140 0048 0C000041		jal	parse_board_perim	# parse the input for south
 141 004c 3C040000		la	$a0, west_array		# store the address of the pointer to west_array
     0050 34840000
 142 0054 0C000041		jal	parse_board_perim	# parse the input for west
 143 0058               	
 144 0058 34020005		li	$v0, READ_INT		# read in the value of the next integer parameter
 145 005c 0000000C		syscall
 146 0060               	
 147 0060 00402821		move	$a1, $v0		# store the number of fixed values
 148 0064 00A0082A		blt	$a1, $zero, error_num_fv					# validate input
     0068 14200014
 149 006c               	
 150 006c 3C040000		la	$a0, board_array	# store the address of the pointer to board_array
     0070 34840000
 151 0074 0C000051		jal	parse_board			# parse the input for board
 152 0078               	
 153 0078 0C000000		jal	print_banner
 154 007c 0C000000		jal	print_initial_puzzle
 155 0080 0C000000		jal	print_final_puzzle
 156 0084               	
 157 0084 3402000A		li	$v0, EXIT
 158 0088 0000000C		syscall							# terminate program
 159 008c               	
 160 008c               error_board_size:
 161 008c 34020004		li	$v0, PRINT_STRING			# load the syscall code
 162 0090 3C040000		la	$a0, invalid_board_size		# load the address to the string
     0094 34840000
 163 0098 0000000C		syscall							# tell the OS to print
 164 009c 3402000A		li	$v0, EXIT
 165 00a0 0000000C		syscall							# terminate program
 166 00a4               	
 167 00a4               error_input_value:
 168 00a4 34020004		li	$v0, PRINT_STRING			# load the syscall code
 169 00a8 3C040000		la	$a0, illegal_input			# load the address to the string
     00ac 34840000
 170 00b0 0000000C		syscall							# tell the OS to print
 171 00b4 3402000A		li	$v0, EXIT
 172 00b8 0000000C		syscall							# terminate program
 173 00bc               	
 174 00bc               error_num_fv:
 175 00bc 34020004		li	$v0, PRINT_STRING			# load the syscall code
 176 00c0 3C040000		la	$a0, invalid_num_fv			# load the address to the string
     00c4 34840000
 177 00c8 0000000C		syscall							# tell the OS to print
 178 00cc 3402000A		li	$v0, EXIT
 179 00d0 0000000C		syscall							# terminate program
 180 00d4               	
 181 00d4               error_fv_input:
 182 00d4 34020004		li	$v0, PRINT_STRING			# load the syscall code
 183 00d8 3C040000		la	$a0, illegal_fv_input		# load the address to the string
     00dc 34840000
 184 00e0 0000000C		syscall							# tell the OS to print
 185 00e4 3402000A		li	$v0, EXIT
 186 00e8 0000000C		syscall							# terminate program
 187 00ec               	
 188 00ec               error_impossible_puzzle:
 189 00ec 34020004		li	$v0, PRINT_STRING			# load the syscall code
 190 00f0 3C040000		la	$a0, impossible_puzzle		# load the address to the string
     00f4 34840000
 191 00f8 0000000C		syscall							# tell the OS to print
 192 00fc 3402000A		li	$v0, EXIT
 193 0100 0000000C		syscall							# terminate program
 194 0104               
 195 0104               parse_board_perim:
 196 0104 34080000		li	$t0, 0						# counter for the number of values read in
 197 0108               	
 198 0108               pbp_loop:
 199 0108 1117000D		beq	$t0, $s7, pbp_done
 200 010c 34020005		li	$v0, READ_INT				# read in a single perimeter value
 201 0110 0000000C		syscall
 202 0114               	
 203 0114 34020001		li	$v0, PRINT_INT
 204 0118 00402021		move $a0, $v0
 205 011c 0000000C		syscall
 206 0120               	
 207 0120 0040082A		blt	$v0, $zero, error_input_value				# validate input
     0124 1420FFDF
 208 0128 02E2082A		bgt	$v0, $s7, error_input_value					# validate input
     012c 1420FFDD
 209 0130               	
 210 0130 00801021		move	$v0, $a0				# store the perimeter value
 211 0134 20840004		addi	$a0, $a0, 4				# move address to base pointer over
 212 0138 21080001		addi	$t0, $t0, 1				# increment counter
 213 013c 08000042		j	pbp_loop
 214 0140               
 215 0140               pbp_done:
 216 0140 03E00008		jr	$ra
 217 0144               	
 218 0144               parse_board:
 219 0144 34080000		li	$t0, 0						# counter for the number of values read in
 220 0148               	
 221 0148               pb_loop:
 222 0148 11050020		beq	$t0, $a1, pb_done			# no fixed values to be read
 223 014c               
 224 014c 34020005		li	$v0, READ_INT				# read in the row
 225 0150 0000000C		syscall
 226 0154 0040082A		blt	$v0, $zero, error_fv_input					# validate input
     0158 1420FFDE
 227 015c 02E2082A		bgt	$v0, $s7, error_fv_input					# validate input
     0160 1420FFDC
 228 0164 00408021		move	$s0, $v0				# store the row value
 229 0168               	
 230 0168 34020005		li	$v0, READ_INT				# read in the col value
 231 016c 0000000C		syscall
 232 0170 0040082A		blt	$v0, $zero, error_fv_input					# validate input
     0174 1420FFD7
 233 0178 02E2082A		bgt	$v0, $s7, error_fv_input					# validate input
     017c 1420FFD5
 234 0180 00408821		move	$s1, $v0				# store the col value
 235 0184               	
 236 0184 34020005		li	$v0, READ_INT				# read in the fixed value
 237 0188 0000000C		syscall
 238 018c 28410001		blt	$v0, MIN_HEIGHT, error_fv_input				# validate input
     0190 1420FFD0
 239 0194 02E2082A		bgt	$v0, $s7, error_fv_input					# validate input
     0198 1420FFCE
 240 019c 00409021		move	$s2, $v0				# store the fixed value
 241 01a0               	
 242 01a0 02170018		mul	$s3, $s0, $s7
     01a4 00009812
 243 01a8 02719820		add	$s3, $s3, $s1				# get the index of the piece
 244 01ac               	
 245 01ac 34190004		li	$t9, 4
 246 01b0 02790018		mul	$s3, $s3, $t9				# get the displacement/offset
     01b4 00009812
 247 01b8 02649820		add	$s3, $s3, $a0				# move the pointer over
 248 01bc               	
 249 01bc AE720000		sw	$s2, 0($s3)					# store the fixed value
 250 01c0               	
 251 01c0 20840004		addi	$a0, $a0, 4				# move address to base pointer over
 252 01c4 21080001		addi	$t0, $t0, 1				# increment counter
 253 01c8 08000052		j	pb_loop
 254 01cc               	
 255 01cc               pb_done:
 256 01cc 03E00008		jr	$ra


EXIT                     = 0000000A   
MAX_SIZE                 = 00000008   
MIN_HEIGHT               = 00000001   
MIN_SIZE                 = 00000003   
PRINT_INT                = 00000001   
PRINT_STRING             = 00000004   
READ_INT                 = 00000005   
banner_msg                 00000184 R  data 
board_array                00000004 R  data 
board_size                 00000000 R  data 
east_array                 00000124 R  data 
error_board_size           0000008C R  text 
error_fv_input             000000D4 R  text 
error_impossible_puzzle    000000EC R  text 
error_input_value          000000A4 R  text 
error_num_fv               000000BC R  text 
final_msg                  000001D1 R  data 
four_spaces                000001F2 R  data 
illegal_fv_input           0000028D R  data 
illegal_input              00000226 R  data 
impossible_puzzle          000002C2 R  data 
initial_msg                000001C0 R  data 
invalid_board_size         000001F9 R  data 
invalid_num_fv             00000254 R  data 
main                       00000000 RG text 
new_line                   000001F7 R  data 
north_array                00000104 R  data 
parse_board                00000144 R  text 
parse_board_perim          00000104 R  text 
pb_done                    000001CC R  text 
pb_loop                    00000148 R  text 
pbp_done                   00000140 R  text 
pbp_loop                   00000108 R  text 
print_banner               ******** XG
print_final_puzzle         ******** XG
print_initial_puzzle       ******** XG
row_terminator             000001E6 R  data 
single_col_separator       000001E4 R  data 
single_row_separator       000001E0 R  data 
south_array                00000144 R  data 
space                      000001E9 R  data 
three_spaces               000001EE R  data 
two_spaces                 000001EB R  data 
west_array                 00000164 R  data 
