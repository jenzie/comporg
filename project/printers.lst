   1 0000               # File: printers.asm
   2 0000               # Author: Jenny Zhen
   3 0000               # Description: Prints a Skyscrapers puzzle.
   4 0000               # Arguments:
   5 0000               # 	
   6 0000               #
   7 0000               # Returns:
   8 0000               #
   9 0000               
  10 0000               # syscall codes
  11 0000               PRINT_INT = 1
  12 0000               PRINT_STRING = 4
  13 0000               READ_INT = 5
  14 0000               EXIT = 10
  15 0000               
  16 0000               	.text							# this is program code
  17 0000               	
  18 0000               									# global data
  19 0000               	.globl	board_size
  20 0000               	.globl	board_array
  21 0000               	.globl	board_copy
  22 0000               	.globl	north_array
  23 0000               	.globl	east_array
  24 0000               	.globl	south_array
  25 0000               	.globl	west_array
  26 0000               	.globl	banner_msg
  27 0000               	.globl	initial_msg
  28 0000               	.globl	final_msg
  29 0000               	.globl	single_row_separator
  30 0000               	.globl	single_col_separator
  31 0000               	.globl	row_terminator
  32 0000               	.globl	space
  33 0000               	.globl	two_spaces
  34 0000               	.globl	three_spaces
  35 0000               	.globl	four_spaces
  36 0000               	.globl	new_line
  37 0000               	.globl	impossible_puzzle
  38 0000               
  39 0000               #
  40 0000               # Name: print_puzzle
  41 0000               #
  42 0000               # Description:	Print a single Skyscrapers puzzle.
  43 0000               # Arguments:
  44 0000               #
  45 0000               
  46 0000               print_banner:
  47 0000 34020004		li 	$v0, PRINT_STRING			# load the syscall code
  48 0004 3C040000		la 	$a0, banner_msg				# load the address to the string
     0008 34840000
  49 000c 0000000C		syscall							# tell the OS to print
  50 0010 03E00008		jr	$ra
  51 0014               
  52 0014               print_initial_puzzle:
  53 0014 34020004		li 	$v0, PRINT_STRING			# load the syscall code
  54 0018 3C040000		la 	$a0, initial_msg			# load the address to the string
     001c 34840000
  55 0020 0000000C		syscall							# tell the OS to print
  56 0024               	
  57 0024 0800000F		j	print_board
  58 0028               	
  59 0028               print_final_puzzle:
  60 0028 34020004		li 	$v0, PRINT_STRING			# load the syscall code
  61 002c 3C040000		la 	$a0, final_msg				# load the address to the string
     0030 34840000
  62 0034 0000000C		syscall							# tell the OS to print
  63 0038               	
  64 0038 0800000F		j	print_board
  65 003c               	
  66 003c               print_board:
  67 003c               									# save for print_board to go to skyscrapers
  68 003c 23BDFFF4		addi	$sp, $sp, -12			# save return address of the caller
  69 0040 AFB10008		sw	$s1, 8($sp)
  70 0044 AFB20004		sw	$s2, 4($sp)
  71 0048 AFBF0000		sw	$ra, 0($sp)
  72 004c               	
  73 004c 0C00001F		jal	print_north_row
  74 0050 0C000035		jal	print_west_east_rows
  75 0054 0C00002A		jal	print_south_row
  76 0058               	
  77 0058 34020004		li 	$v0, PRINT_STRING			# load the syscall code
  78 005c 3C040000		la	$a0, new_line				# load the address to the string
     0060 34840000
  79 0064 0000000C		syscall							# tell the OS to print
  80 0068               	
  81 0068               									# restore for print_board to go skyscrapers
  82 0068 8FBF0000		lw	$ra, 0($sp)					# restore return address of the caller
  83 006c 8FB00004		lw	$s0, 4($sp)
  84 0070 8FB10008		lw	$s1, 8($sp)
  85 0074 23BD000C		addi	$sp, $sp, 12
  86 0078               	
  87 0078 03E00008		jr	$ra
  88 007c               	
  89 007c               print_north_row:
  90 007c               									# save for print_tile
  91 007c 23BDFFFC		addi	$sp, $sp, -4			# save return address of the caller
  92 0080 AFBF0000		sw	$ra, 0($sp)
  93 0084               	
  94 0084 34020004		li 	$v0, PRINT_STRING			# load the syscall code
  95 0088 3C040000		la	$a0, three_spaces			# load the address to the string
     008c 34840000
  96 0090 0000000C		syscall							# tell the OS to print
  97 0094               	
  98 0094 3C0D0000		la	$t5, north_array			# load the address of an element in north
     0098 35AD0000
  99 009c 8DAE0000		lw	$t6, 0($t5)					# load the value of the element in north
 100 00a0               	
 101 00a0 00007821		move	$t7, $zero				# count the number of tiles printed
 102 00a4               	
 103 00a4 08000081		j	print_loop
 104 00a8               	
 105 00a8               print_south_row:
 106 00a8               									# save for print_tile
 107 00a8 23BDFFFC		addi	$sp, $sp, -4			# save return address of the caller
 108 00ac AFBF0000		sw	$ra, 0($sp)
 109 00b0               	
 110 00b0 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 111 00b4 3C040000		la	$a0, three_spaces			# load the address to the string
     00b8 34840000
 112 00bc 0000000C		syscall							# tell the OS to print
 113 00c0               	
 114 00c0 3C0D0000		la	$t5, south_array			# load the address of an element in south
     00c4 35AD0000
 115 00c8 8DAE0000		lw	$t6, 0($t5)					# load the value of the element in south
 116 00cc               	
 117 00cc 00007821		move	$t7, $zero				# count the number of tiles printed
 118 00d0               		
 119 00d0 08000081		j	print_loop
 120 00d4               	
 121 00d4               print_west_east_rows:
 122 00d4               									# save for print_loop_s
 123 00d4 23BDFFFC		addi	$sp, $sp, -4			# save return address of the caller
 124 00d8 AFBF0000		sw	$ra, 0($sp)
 125 00dc               	
 126 00dc 3C090000		la	$t1, west_array				# load the address of an element in west
     00e0 35290000
 127 00e4 8D2A0000		lw	$t2, 0($t1)					# load the value of the element in west
 128 00e8               	
 129 00e8 3C0B0000		la	$t3, east_array				# load the address of an element in east
     00ec 356B0000
 130 00f0 8D6C0000		lw	$t4, 0($t3)					# load the value of the element in east
 131 00f4               	
 132 00f4 3C0D0000		la	$t5, board_array			# load the address of an element in board
     00f8 35AD0000
 133 00fc 8DAE0000		lw	$t6, 0($t5)					# load the value of the element in board
 134 0100               	
 135 0100 0000C021		move	$t8, $zero				# count the number of rows printed
 136 0104               	
 137 0104 08000042		j	print_we_loop
 138 0108               	
 139 0108               print_we_loop:
 140 0108 13170027		beq	$t8, $s7, print_we_done		# check counter for num rows
 141 010c               	
 142 010c 0C0000A4		jal	print_row_divider
 143 0110               	
 144 0110               									# print west value
 145 0110               
 146 0110 11400004		beq	$t2, $zero, print_empty_w	# check for null value
 147 0114 34020001		li 	$v0, PRINT_INT				# load the syscall code
 148 0118 01402021		move	$a0, $t2				# load the value
 149 011c 0000000C		syscall							# tell the OS to print
 150 0120 0800004D		j print_next_w
 151 0124               	
 152 0124               print_empty_w:
 153 0124 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 154 0128 3C040000		la	$a0, space					# load the address to the string
     012c 34840000
 155 0130 0000000C		syscall							# tell the OS to print
 156 0134               	
 157 0134               print_next_w:
 158 0134 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 159 0138 3C040000		la	$a0, space					# load the address to the string
     013c 34840000
 160 0140 0000000C		syscall							# tell the OS to print
 161 0144               	
 162 0144 00007821		move	$t7, $zero				# count the number of tiles printed
 163 0148               	
 164 0148 0C00006E		jal	print_loop_s_init
 165 014c               	
 166 014c 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 167 0150 3C040000		la	$a0, space					# load the address to the string
     0154 34840000
 168 0158 0000000C		syscall							# tell the OS to print
 169 015c               	
 170 015c               									# print east value
 171 015c               									
 172 015c 11800004		beq	$t4, $zero, print_empty_e	# check for null value
 173 0160 34020001		li 	$v0, PRINT_INT				# load the syscall code
 174 0164 01802021		move	$a0, $t4				# load the value
 175 0168 0000000C		syscall							# tell the OS to print
 176 016c 08000060		j	print_next_e
 177 0170               	
 178 0170               print_empty_e:
 179 0170 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 180 0174 3C040000		la	$a0, space					# load the address to the string
     0178 34840000
 181 017c 0000000C		syscall							# tell the OS to print
 182 0180               	
 183 0180               print_next_e:
 184 0180 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 185 0184 3C040000		la	$a0, new_line				# load the address to the string
     0188 34840000
 186 018c 0000000C		syscall							# tell the OS to print
 187 0190               	
 188 0190 23180001		addi	$t8, $t8, 1				# increment the counter
 189 0194 21290004		addi	$t1, $t1, 4				# move the base pointer over for west
 190 0198 8D2A0000		lw	$t2, 0($t1)					# load the value of the tile for west
 191 019c 216B0004		addi	$t3, $t3, 4				# move the base pointer over for east
 192 01a0 8D6C0000		lw	$t4, 0($t3)					# load the value of the tile for east
 193 01a4               	
 194 01a4 08000042		j	print_we_loop				# next row
 195 01a8               	
 196 01a8               print_we_done:
 197 01a8 0C0000A4		jal	print_row_divider
 198 01ac               	
 199 01ac               									# restore for print_loop_s
 200 01ac 8FBF0000		lw	$ra, 0($sp)					# restore return address of the caller
 201 01b0 23BD0004		addi	$sp, $sp, 4
 202 01b4               	
 203 01b4 03E00008		jr	$ra
 204 01b8               	
 205 01b8               print_loop_s_init:
 206 01b8 23BDFFFC		addi	$sp, $sp, -4			# save return address of the caller
 207 01bc AFBF0000		sw	$ra, 0($sp)
 208 01c0               	
 209 01c0               print_loop_s:
 210 01c0 11F70009		beq	$t7, $s7, print_done_s		# check counter for num tiles
 211 01c4               	
 212 01c4 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 213 01c8 3C040000		la	$a0, single_col_separator	# load the address to the string
     01cc 34840000
 214 01d0 0000000C		syscall							# tell the OS to print
 215 01d4               	
 216 01d4 0C000092		jal	print_tile
 217 01d8               	
 218 01d8 21EF0001		addi	$t7, $t7, 1				# increment the counter
 219 01dc 21AD0004		addi	$t5, $t5, 4				# move the base pointer over for board
 220 01e0 8DAE0000		lw	$t6, 0($t5)					# load the value of the tile for board
 221 01e4               	
 222 01e4 08000070		j	print_loop_s				# next tile
 223 01e8               	
 224 01e8               print_done_s:
 225 01e8 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 226 01ec 3C040000		la	$a0, single_col_separator	# load the address to the string
     01f0 34840000
 227 01f4 0000000C		syscall							# tell the OS to print
 228 01f8               	
 229 01f8               									# restore for print_tile
 230 01f8 8FBF0000		lw	$ra, 0($sp)					# restore return address of the caller
 231 01fc 23BD0004		addi	$sp, $sp, 4
 232 0200               	
 233 0200 03E00008		jr	$ra
 234 0204               	
 235 0204               print_loop:
 236 0204 11F70009		beq	$t7, $s7, print_done		# check counter for num tiles
 237 0208               	
 238 0208 0C000092		jal	print_tile
 239 020c               	
 240 020c 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 241 0210 3C040000		la	$a0, space					# load the address to the string
     0214 34840000
 242 0218 0000000C		syscall							# tell the OS to print
 243 021c               	
 244 021c 21EF0001		addi	$t7, $t7, 1				# increment the counter
 245 0220 21AD0004		addi	$t5, $t5, 4				# move the base pointer over
 246 0224 8DAE0000		lw	$t6, 0($t5)					# load the value of the tile
 247 0228 08000081		j	print_loop
 248 022c               	
 249 022c               print_done:
 250 022c               									# restore for print_tile
 251 022c 8FBF0000		lw	$ra, 0($sp)					# restore return address of the caller
 252 0230 23BD0004		addi	$sp, $sp, 4
 253 0234               	
 254 0234 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 255 0238 3C040000		la	$a0, new_line				# load the address to the string
     023c 34840000
 256 0240 0000000C		syscall							# tell the OS to print
 257 0244               	
 258 0244 03E00008		jr	$ra
 259 0248               	
 260 0248               print_tile:
 261 0248 11C0000C		beq	$t6, $zero, print_empty_tile	# check for null value
 262 024c               	
 263 024c 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 264 0250 3C040000		la	$a0, space					# load the address to the string
     0254 34840000
 265 0258 0000000C		syscall							# tell the OS to print
 266 025c               	
 267 025c 34020001		li 	$v0, PRINT_INT				# load the syscall code
 268 0260 01C02021		move 	$a0, $t6				# load the address to the string
 269 0264 0000000C		syscall							# tell the OS to print
 270 0268               	
 271 0268 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 272 026c 3C040000		la	$a0, space					# load the address to the string
     0270 34840000
 273 0274 0000000C		syscall							# tell the OS to print
 274 0278               	
 275 0278 03E00008		jr	$ra
 276 027c               	
 277 027c               print_empty_tile:
 278 027c 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 279 0280 3C040000		la	$a0, three_spaces			# load the address to the string
     0284 34840000
 280 0288 0000000C		syscall							# tell the OS to print
 281 028c               	
 282 028c 03E00008		jr	$ra
 283 0290               	
 284 0290               print_row_divider:
 285 0290 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 286 0294 3C040000		la	$a0, two_spaces				# load the address to the string
     0298 34840000
 287 029c 0000000C		syscall							# tell the OS to print
 288 02a0               	
 289 02a0 00007821		move	$t7, $zero				# count the number of tiles printed
 290 02a4 080000AA		j	print_one_divider
 291 02a8               	
 292 02a8               print_one_divider:
 293 02a8 11F70006		beq	$t7, $s7, print_div_done
 294 02ac               	
 295 02ac 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 296 02b0 3C040000		la	$a0, single_row_separator	# load the address to the string
     02b4 34840000
 297 02b8 0000000C		syscall							# tell the OS to print
 298 02bc               	
 299 02bc 21EF0001		addi	$t7, $t7, 1				# increment the counter
 300 02c0 080000AA		j	print_one_divider
 301 02c4               	
 302 02c4               print_div_done:
 303 02c4 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 304 02c8 3C040000		la	$a0, row_terminator			# load the address to the string
     02cc 34840000
 305 02d0 0000000C		syscall							# tell the OS to print
 306 02d4               	
 307 02d4 03E00008		jr	$ra


EXIT                  = 0000000A   
PRINT_INT             = 00000001   
PRINT_STRING          = 00000004   
READ_INT              = 00000005   
banner_msg              ******** XG
board_array             ******** XG
board_copy              ******** XG
board_size              ******** XG
east_array              ******** XG
final_msg               ******** XG
four_spaces             ******** XG
impossible_puzzle       ******** XG
initial_msg             ******** XG
new_line                ******** XG
north_array             ******** XG
print_banner            00000000 R  text 
print_board             0000003C R  text 
print_div_done          000002C4 R  text 
print_done              0000022C R  text 
print_done_s            000001E8 R  text 
print_empty_e           00000170 R  text 
print_empty_tile        0000027C R  text 
print_empty_w           00000124 R  text 
print_final_puzzle      00000028 R  text 
print_initial_puzzle    00000014 R  text 
print_loop              00000204 R  text 
print_loop_s            000001C0 R  text 
print_loop_s_init       000001B8 R  text 
print_next_e            00000180 R  text 
print_next_w            00000134 R  text 
print_north_row         0000007C R  text 
print_one_divider       000002A8 R  text 
print_row_divider       00000290 R  text 
print_south_row         000000A8 R  text 
print_tile              00000248 R  text 
print_we_done           000001A8 R  text 
print_we_loop           00000108 R  text 
print_west_east_rows    000000D4 R  text 
row_terminator          ******** XG
single_col_separator    ******** XG
single_row_separator    ******** XG
south_array             ******** XG
space                   ******** XG
three_spaces            ******** XG
two_spaces              ******** XG
west_array              ******** XG
