   1 0000               # File: printers.asm
   2 0000               # Author: Jenny Zhen
   3 0000               # Description: Prints a Skyscrapers puzzle.
   4 0000               # Arguments:
   5 0000               # 	
   6 0000               #
   7 0000               # Returns:
   8 0000               #
   9 0000               
  10 0000               # syscall codes
  11 0000               PRINT_INT = 1
  12 0000               PRINT_STRING = 4
  13 0000               READ_INT = 5
  14 0000               EXIT = 10
  15 0000               
  16 0000               	.text							# this is program code
  17 0000               	
  18 0000               									# global data
  19 0000               	.globl	board_size
  20 0000               	.globl	board_array
  21 0000               	.globl	north_array
  22 0000               	.globl	east_array
  23 0000               	.globl	south_array
  24 0000               	.globl	west_array
  25 0000               	.globl	banner_msg
  26 0000               	.globl	initial_msg
  27 0000               	.globl	final_msg
  28 0000               	.globl	single_row_separator
  29 0000               	.globl	single_col_separator
  30 0000               	.globl	row_terminator
  31 0000               	.globl	space
  32 0000               	.globl	two_spaces
  33 0000               	.globl	three_spaces
  34 0000               	.globl	four_spaces
  35 0000               	.globl	new_line
  36 0000               	.globl	impossible_puzzle
  37 0000               
  38 0000               #
  39 0000               # Name: print_puzzle
  40 0000               #
  41 0000               # Description:	Print a single Skyscrapers puzzle.
  42 0000               # Arguments:
  43 0000               #
  44 0000               
  45 0000               print_banner:
  46 0000 34020004		li 	$v0, PRINT_STRING			# load the syscall code
  47 0004 3C040000		la 	$a0, banner_msg				# load the address to the string
     0008 34840000
  48 000c 0000000C		syscall							# tell the OS to print
  49 0010 03E00008		jr	$ra
  50 0014               
  51 0014               print_initial_puzzle:
  52 0014 34020004		li 	$v0, PRINT_STRING			# load the syscall code
  53 0018 3C040000		la 	$a0, initial_msg			# load the address to the string
     001c 34840000
  54 0020 0000000C		syscall							# tell the OS to print
  55 0024               	
  56 0024 0800000F		j	print_board
  57 0028               	
  58 0028               print_final_puzzle:
  59 0028 34020004		li 	$v0, PRINT_STRING			# load the syscall code
  60 002c 3C040000		la 	$a0, final_msg				# load the address to the string
     0030 34840000
  61 0034 0000000C		syscall							# tell the OS to print
  62 0038               	
  63 0038 0800000F		j	print_board
  64 003c               	
  65 003c               print_board:
  66 003c               									# save for print_north_row
  67 003c 23BDFFFC		addi	$sp, $sp, -4			# save return address of the caller
  68 0040 AFBF0000		sw	$ra, 0($sp)
  69 0044               	
  70 0044 0C000017		jal	print_north_row
  71 0048 0C00002D		jal	print_west_east_rows
  72 004c 0C000022		jal	print_south_row
  73 0050               	
  74 0050               									# restore for print_north_row
  75 0050 8FBF0000		lw	$ra, 0($sp)					# restore return address of the caller
  76 0054 23BD0004		addi	$sp, $sp, 4
  77 0058               	
  78 0058 03E00008		jr	$ra
  79 005c               	
  80 005c               print_north_row:
  81 005c 34020004		li 	$v0, PRINT_STRING			# load the syscall code
  82 0060 3C040000		la	$a0, three_spaces			# load the address to the string
     0064 34840000
  83 0068 0000000C		syscall							# tell the OS to print
  84 006c               	
  85 006c 3C0D0000		la	$t5, north_array			# load the address of an element in north
     0070 35AD0000
  86 0074 8DAE0000		lw	$t6, 0($t5)					# load the value of the element in north
  87 0078               	
  88 0078 00007821		move	$t7, $zero				# count the number of tiles printed
  89 007c               	
  90 007c               									# save for print_tile
  91 007c 23BDFFFC		addi	$sp, $sp, -4			# save return address of the caller
  92 0080 AFBF0000		sw	$ra, 0($sp)
  93 0084               	
  94 0084 0800006B		j	print_loop
  95 0088               	
  96 0088               print_south_row:
  97 0088 34020004		li 	$v0, PRINT_STRING			# load the syscall code
  98 008c 3C040000		la	$a0, three_spaces			# load the address to the string
     0090 34840000
  99 0094 0000000C		syscall							# tell the OS to print
 100 0098               	
 101 0098 3C0D0000		la	$t5, south_array			# load the address of an element in south
     009c 35AD0000
 102 00a0 8DAE0000		lw	$t6, 0($t5)					# load the value of the element in south
 103 00a4               	
 104 00a4 00007821		move	$t7, $zero				# count the number of tiles printed
 105 00a8               	
 106 00a8               									# save for print_tile
 107 00a8 23BDFFFC		addi	$sp, $sp, -4			# save return address of the caller
 108 00ac AFBF0000		sw	$ra, 0($sp)
 109 00b0               	
 110 00b0 0800006B		j	print_loop
 111 00b4               	
 112 00b4               print_west_east_rows:
 113 00b4 3C090000		la	$t1, west_array				# load the address of an element in west
     00b8 35290000
 114 00bc 8D2A0000		lw	$t2, 0($t1)					# load the value of the element in west
 115 00c0               	
 116 00c0 3C0B0000		la	$t3, east_array				# load the address of an element in east
     00c4 356B0000
 117 00c8 8D6C0000		lw	$t4, 0($t3)					# load the value of the element in east
 118 00cc               	
 119 00cc 3C0D0000		la	$t5, board_array			# load the address of an element in board
     00d0 35AD0000
 120 00d4 8DAE0000		lw	$t6, 0($t5)					# load the value of the element in board
 121 00d8               	
 122 00d8 0000C021		move	$t8, $zero				# count the number of rows printed
 123 00dc               	
 124 00dc               									# save for print_loop_s
 125 00dc 23BDFFFC		addi	$sp, $sp, -4			# save return address of the caller
 126 00e0 AFBF0000		sw	$ra, 0($sp)
 127 00e4               	
 128 00e4 0800003A		j	print_we_loop
 129 00e8               	
 130 00e8               print_we_loop:
 131 00e8 1317001C		beq	$t8, $s7, print_we_done		# check counter for num rows
 132 00ec               	
 133 00ec               									# print west value
 134 00ec 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 135 00f0 01202021		move	$a0, $t1				# load the address to the string
 136 00f4 0000000C		syscall							# tell the OS to print
 137 00f8               	
 138 00f8 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 139 00fc 3C040000		la	$a0, space					# load the address to the string
     0100 34840000
 140 0104 0000000C		syscall							# tell the OS to print
 141 0108               	
 142 0108 00007821		move	$t7, $zero				# count the number of tiles printed
 143 010c               	
 144 010c               									# save for print_tile
 145 010c 23BDFFFC		addi	$sp, $sp, -4			# save return address of the caller
 146 0110 AFBF0000		sw	$ra, 0($sp)
 147 0114               	
 148 0114 0C00005A		jal	print_loop_s
 149 0118               	
 150 0118 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 151 011c 3C040000		la	$a0, space					# load the address to the string
     0120 34840000
 152 0124 0000000C		syscall							# tell the OS to print
 153 0128               	
 154 0128               									# print east value
 155 0128 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 156 012c 01602021		move	$a0, $t3				# load the address to the string
 157 0130 0000000C		syscall							# tell the OS to print
 158 0134               	
 159 0134 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 160 0138 3C040000		la	$a0, new_line				# load the address to the string
     013c 34840000
 161 0140 0000000C		syscall							# tell the OS to print
 162 0144               	
 163 0144 23180001		addi	$t8, $t8, 1				# increment the counter
 164 0148 21290004		addi	$t1, $t1, 4				# move the base pointer over for west
 165 014c 8D2A0000		lw	$t2, 0($t1)					# load the value of the tile for west
 166 0150 216B0004		addi	$t3, $t3, 4				# move the base pointer over for east
 167 0154 8D6C0000		lw	$t4, 0($t3)					# load the value of the tile for east
 168 0158               	
 169 0158 0800003A		j	print_we_loop
 170 015c               	
 171 015c               print_we_done:
 172 015c               									# restore for print_loop_s
 173 015c 8FBF0000		lw	$ra, 0($sp)					# restore return address of the caller
 174 0160 23BD0004		addi	$sp, $sp, 4
 175 0164               	
 176 0164 03E00008		jr	$ra
 177 0168               	
 178 0168               print_loop_s:
 179 0168 11F70009		beq	$t7, $s7, print_done_s		# check counter for num tiles
 180 016c               	
 181 016c 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 182 0170 3C040000		la	$a0, single_col_separator	# load the address to the string
     0174 34840000
 183 0178 0000000C		syscall							# tell the OS to print
 184 017c               	
 185 017c 0C000078		jal	print_tile
 186 0180               	
 187 0180 21EF0001		addi	$t7, $t7, 1				# increment the counter
 188 0184 21AD0004		addi	$t5, $t5, 4				# move the base pointer over for board
 189 0188 8DAE0000		lw	$t6, 0($t5)					# load the value of the tile for board
 190 018c               	
 191 018c 0800006B		j	print_loop
 192 0190               	
 193 0190               print_done_s:
 194 0190               									# restore for print_tile
 195 0190 8FBF0000		lw	$ra, 0($sp)					# restore return address of the caller
 196 0194 23BD0004		addi	$sp, $sp, 4
 197 0198               	
 198 0198 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 199 019c 3C040000		la	$a0, single_col_separator	# load the address to the string
     01a0 34840000
 200 01a4 0000000C		syscall							# tell the OS to print
 201 01a8               	
 202 01a8 03E00008		jr	$ra
 203 01ac               	
 204 01ac               print_loop:
 205 01ac 11F70005		beq	$t7, $s7, print_done		# check counter for num tiles
 206 01b0               	
 207 01b0 0C000078		jal	print_tile
 208 01b4               	
 209 01b4 21EF0001		addi	$t7, $t7, 1				# increment the counter
 210 01b8 21AD0004		addi	$t5, $t5, 4				# move the base pointer over
 211 01bc 8DAE0000		lw	$t6, 0($t5)					# load the value of the tile
 212 01c0 0800006B		j	print_loop
 213 01c4               	
 214 01c4               print_done:
 215 01c4               									# restore for print_tile
 216 01c4 8FBF0000		lw	$ra, 0($sp)					# restore return address of the caller
 217 01c8 23BD0004		addi	$sp, $sp, 4
 218 01cc               	
 219 01cc 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 220 01d0 3C040000		la	$a0, new_line				# load the address to the string
     01d4 34840000
 221 01d8 0000000C		syscall							# tell the OS to print
 222 01dc               	
 223 01dc 03E00008		jr	$ra
 224 01e0               	
 225 01e0               print_tile:
 226 01e0 11C0000C		beq	$t6, $zero, print_empty_tile	# check for null value
 227 01e4               	
 228 01e4 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 229 01e8 3C040000		la	$a0, space					# load the address to the string
     01ec 34840000
 230 01f0 0000000C		syscall							# tell the OS to print
 231 01f4               	
 232 01f4 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 233 01f8 01A02021		move 	$a0, $t5					# load the address to the string
 234 01fc 0000000C		syscall							# tell the OS to print
 235 0200               	
 236 0200 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 237 0204 3C040000		la	$a0, space					# load the address to the string
     0208 34840000
 238 020c 0000000C		syscall							# tell the OS to print
 239 0210               	
 240 0210 03E00008		jr	$ra
 241 0214               	
 242 0214               print_empty_tile:
 243 0214 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 244 0218 3C040000		la	$a0, three_spaces			# load the address to the string
     021c 34840000
 245 0220 0000000C		syscall							# tell the OS to print
 246 0224               	
 247 0224 03E00008		jr	$ra
 248 0228               	
 249 0228               print_row_divider:
 250 0228 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 251 022c 3C040000		la	$a0, two_spaces				# load the address to the string
     0230 34840000
 252 0234 0000000C		syscall							# tell the OS to print
 253 0238               	
 254 0238 00007821		move	$t7, $zero				# count the number of tiles printed
 255 023c 08000090		j	print_one_divider
 256 0240               	
 257 0240               print_one_divider:
 258 0240 11E00006		beq	$t7, $zero, print_div_done
 259 0244               	
 260 0244 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 261 0248 3C040000		la	$a0, single_row_separator	# load the address to the string
     024c 34840000
 262 0250 0000000C		syscall							# tell the OS to print
 263 0254               	
 264 0254 21EF0001		addi	$t7, $t7, 1				# increment the counter
 265 0258 08000090		j	print_one_divider
 266 025c               	
 267 025c               print_div_done:
 268 025c 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 269 0260 3C040000		la	$a0, row_terminator			# load the address to the string
     0264 34840000
 270 0268 0000000C		syscall							# tell the OS to print
 271 026c               	
 272 026c 03E00008		jr	$ra


EXIT                  = 0000000A   
PRINT_INT             = 00000001   
PRINT_STRING          = 00000004   
READ_INT              = 00000005   
banner_msg              ******** XG
board_array             ******** XG
board_size              ******** XG
east_array              ******** XG
final_msg               ******** XG
four_spaces             ******** XG
impossible_puzzle       ******** XG
initial_msg             ******** XG
new_line                ******** XG
north_array             ******** XG
print_banner            00000000 R  text 
print_board             0000003C R  text 
print_div_done          0000025C R  text 
print_done              000001C4 R  text 
print_done_s            00000190 R  text 
print_empty_tile        00000214 R  text 
print_final_puzzle      00000028 R  text 
print_initial_puzzle    00000014 R  text 
print_loop              000001AC R  text 
print_loop_s            00000168 R  text 
print_north_row         0000005C R  text 
print_one_divider       00000240 R  text 
print_row_divider       00000228 R  text 
print_south_row         00000088 R  text 
print_tile              000001E0 R  text 
print_we_done           0000015C R  text 
print_we_loop           000000E8 R  text 
print_west_east_rows    000000B4 R  text 
row_terminator          ******** XG
single_col_separator    ******** XG
single_row_separator    ******** XG
south_array             ******** XG
space                   ******** XG
three_spaces            ******** XG
two_spaces              ******** XG
west_array              ******** XG
