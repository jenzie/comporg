   1 0000               # File: printers.asm
   2 0000               # Author: Jenny Zhen
   3 0000               # Description: Prints a Skyscrapers puzzle.
   4 0000               # Arguments:
   5 0000               # 	
   6 0000               #
   7 0000               # Returns:
   8 0000               #
   9 0000               
  10 0000               # syscall codes
  11 0000               PRINT_INT = 1
  12 0000               PRINT_STRING = 4
  13 0000               READ_INT = 5
  14 0000               EXIT = 10
  15 0000               
  16 0000               	.text							# this is program code
  17 0000               	
  18 0000               									# global data
  19 0000               	.globl	board_size
  20 0000               	.globl	board_array
  21 0000               	.globl	north_array
  22 0000               	.globl	east_array
  23 0000               	.globl	south_array
  24 0000               	.globl	west_array
  25 0000               	.globl	banner_msg
  26 0000               	.globl	initial_msg
  27 0000               	.globl	final_msg
  28 0000               	.globl	single_row_separator
  29 0000               	.globl	single_col_separator
  30 0000               	.globl	row_terminator
  31 0000               	.globl	space
  32 0000               	.globl	two_spaces
  33 0000               	.globl	three_spaces
  34 0000               	.globl	four_spaces
  35 0000               	.globl	new_line
  36 0000               	.globl	impossible_puzzle
  37 0000               
  38 0000               #
  39 0000               # Name: print_puzzle
  40 0000               #
  41 0000               # Description:	Print a single Skyscrapers puzzle.
  42 0000               # Arguments:
  43 0000               #
  44 0000               
  45 0000               print_banner:
  46 0000 34020004		li 	$v0, PRINT_STRING			# load the syscall code
  47 0004 3C040000		la 	$a0, banner_msg				# load the address to the string
     0008 34840000
  48 000c 0000000C		syscall							# tell the OS to print
  49 0010 03E00008		jr	$ra
  50 0014               
  51 0014               print_initial_puzzle:
  52 0014 34020004		li 	$v0, PRINT_STRING			# load the syscall code
  53 0018 3C040000		la 	$a0, initial_msg			# load the address to the string
     001c 34840000
  54 0020 0000000C		syscall							# tell the OS to print
  55 0024               	
  56 0024 0800000F		j	print_board
  57 0028               	
  58 0028               print_final_puzzle:
  59 0028 34020004		li 	$v0, PRINT_STRING			# load the syscall code
  60 002c 3C040000		la 	$a0, final_msg				# load the address to the string
     0030 34840000
  61 0034 0000000C		syscall							# tell the OS to print
  62 0038               	
  63 0038 0800000F		j	print_board
  64 003c               	
  65 003c               print_board:
  66 003c               									# save for print_board to go to skyscrapers
  67 003c 23BDFFFC		addi	$sp, $sp, -4			# save return address of the caller
  68 0040 AFBF0000		sw	$ra, 0($sp)
  69 0044               	
  70 0044 0C000017		jal	print_north_row
  71 0048 0C00002D		jal	print_west_east_rows
  72 004c 0C000022		jal	print_south_row
  73 0050               	
  74 0050               									# restore for print_board to go skyscrapers
  75 0050 8FBF0000		lw	$ra, 0($sp)					# restore return address of the caller
  76 0054 23BD0004		addi	$sp, $sp, 4
  77 0058               	
  78 0058 03E00008		jr	$ra
  79 005c               	
  80 005c               print_north_row:
  81 005c               									# save for print_tile
  82 005c 23BDFFFC		addi	$sp, $sp, -4			# save return address of the caller
  83 0060 AFBF0000		sw	$ra, 0($sp)
  84 0064               	
  85 0064 34020004		li 	$v0, PRINT_STRING			# load the syscall code
  86 0068 3C040000		la	$a0, three_spaces			# load the address to the string
     006c 34840000
  87 0070 0000000C		syscall							# tell the OS to print
  88 0074               	
  89 0074 3C0D0000		la	$t5, north_array			# load the address of an element in north
     0078 35AD0000
  90 007c 8DAE0000		lw	$t6, 0($t5)					# load the value of the element in north
  91 0080               	
  92 0080 00007821		move	$t7, $zero				# count the number of tiles printed
  93 0084               	
  94 0084 08000079		j	print_loop
  95 0088               	
  96 0088               print_south_row:
  97 0088               									# save for print_tile
  98 0088 23BDFFFC		addi	$sp, $sp, -4			# save return address of the caller
  99 008c AFBF0000		sw	$ra, 0($sp)
 100 0090               	
 101 0090 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 102 0094 3C040000		la	$a0, three_spaces			# load the address to the string
     0098 34840000
 103 009c 0000000C		syscall							# tell the OS to print
 104 00a0               	
 105 00a0 3C0D0000		la	$t5, south_array			# load the address of an element in south
     00a4 35AD0000
 106 00a8 8DAE0000		lw	$t6, 0($t5)					# load the value of the element in south
 107 00ac               	
 108 00ac 00007821		move	$t7, $zero				# count the number of tiles printed
 109 00b0               		
 110 00b0 08000079		j	print_loop
 111 00b4               	
 112 00b4               print_west_east_rows:
 113 00b4               									# save for print_loop_s
 114 00b4 23BDFFFC		addi	$sp, $sp, -4			# save return address of the caller
 115 00b8 AFBF0000		sw	$ra, 0($sp)
 116 00bc               	
 117 00bc 3C090000		la	$t1, west_array				# load the address of an element in west
     00c0 35290000
 118 00c4 8D2A0000		lw	$t2, 0($t1)					# load the value of the element in west
 119 00c8               	
 120 00c8 3C0B0000		la	$t3, east_array				# load the address of an element in east
     00cc 356B0000
 121 00d0 8D6C0000		lw	$t4, 0($t3)					# load the value of the element in east
 122 00d4               	
 123 00d4 3C0D0000		la	$t5, board_array			# load the address of an element in board
     00d8 35AD0000
 124 00dc 8DAE0000		lw	$t6, 0($t5)					# load the value of the element in board
 125 00e0               	
 126 00e0 0000C021		move	$t8, $zero				# count the number of rows printed
 127 00e4               	
 128 00e4 0800003A		j	print_we_loop
 129 00e8               	
 130 00e8               print_we_loop:
 131 00e8 13170027		beq	$t8, $s7, print_we_done		# check counter for num rows
 132 00ec               	
 133 00ec 0C00009C		jal	print_row_divider
 134 00f0               	
 135 00f0               									# print west value
 136 00f0               
 137 00f0 11400004		beq	$t2, $zero, print_empty_w	# check for null value
 138 00f4 34020001		li 	$v0, PRINT_INT				# load the syscall code
 139 00f8 01402021		move	$a0, $t2				# load the value
 140 00fc 0000000C		syscall							# tell the OS to print
 141 0100 08000045		j print_next_w
 142 0104               	
 143 0104               print_empty_w:
 144 0104 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 145 0108 3C040000		la	$a0, space					# load the address to the string
     010c 34840000
 146 0110 0000000C		syscall							# tell the OS to print
 147 0114               	
 148 0114               print_next_w:
 149 0114 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 150 0118 3C040000		la	$a0, space					# load the address to the string
     011c 34840000
 151 0120 0000000C		syscall							# tell the OS to print
 152 0124               	
 153 0124 00007821		move	$t7, $zero				# count the number of tiles printed
 154 0128               	
 155 0128 0C000066		jal	print_loop_s_init
 156 012c               	
 157 012c 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 158 0130 3C040000		la	$a0, space					# load the address to the string
     0134 34840000
 159 0138 0000000C		syscall							# tell the OS to print
 160 013c               	
 161 013c               									# print east value
 162 013c               									
 163 013c 11800004		beq	$t4, $zero, print_empty_e	# check for null value
 164 0140 34020001		li 	$v0, PRINT_INT				# load the syscall code
 165 0144 01802021		move	$a0, $t4				# load the value
 166 0148 0000000C		syscall							# tell the OS to print
 167 014c 08000058		j	print_next_e
 168 0150               	
 169 0150               print_empty_e:
 170 0150 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 171 0154 3C040000		la	$a0, space					# load the address to the string
     0158 34840000
 172 015c 0000000C		syscall							# tell the OS to print
 173 0160               	
 174 0160               print_next_e:
 175 0160 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 176 0164 3C040000		la	$a0, new_line				# load the address to the string
     0168 34840000
 177 016c 0000000C		syscall							# tell the OS to print
 178 0170               	
 179 0170 23180001		addi	$t8, $t8, 1				# increment the counter
 180 0174 21290004		addi	$t1, $t1, 4				# move the base pointer over for west
 181 0178 8D2A0000		lw	$t2, 0($t1)					# load the value of the tile for west
 182 017c 216B0004		addi	$t3, $t3, 4				# move the base pointer over for east
 183 0180 8D6C0000		lw	$t4, 0($t3)					# load the value of the tile for east
 184 0184               	
 185 0184 0800003A		j	print_we_loop				# next row
 186 0188               	
 187 0188               print_we_done:
 188 0188 0C00009C		jal	print_row_divider
 189 018c               	
 190 018c               									# restore for print_loop_s
 191 018c 8FBF0000		lw	$ra, 0($sp)					# restore return address of the caller
 192 0190 23BD0004		addi	$sp, $sp, 4
 193 0194               	
 194 0194 03E00008		jr	$ra
 195 0198               	
 196 0198               print_loop_s_init:
 197 0198 23BDFFFC		addi	$sp, $sp, -4			# save return address of the caller
 198 019c AFBF0000		sw	$ra, 0($sp)
 199 01a0               	
 200 01a0               print_loop_s:
 201 01a0 11F70009		beq	$t7, $s7, print_done_s		# check counter for num tiles
 202 01a4               	
 203 01a4 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 204 01a8 3C040000		la	$a0, single_col_separator	# load the address to the string
     01ac 34840000
 205 01b0 0000000C		syscall							# tell the OS to print
 206 01b4               	
 207 01b4 0C00008A		jal	print_tile
 208 01b8               	
 209 01b8 21EF0001		addi	$t7, $t7, 1				# increment the counter
 210 01bc 21AD0004		addi	$t5, $t5, 4				# move the base pointer over for board
 211 01c0 8DAE0000		lw	$t6, 0($t5)					# load the value of the tile for board
 212 01c4               	
 213 01c4 08000068		j	print_loop_s				# next tile
 214 01c8               	
 215 01c8               print_done_s:
 216 01c8 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 217 01cc 3C040000		la	$a0, single_col_separator	# load the address to the string
     01d0 34840000
 218 01d4 0000000C		syscall							# tell the OS to print
 219 01d8               	
 220 01d8               									# restore for print_tile
 221 01d8 8FBF0000		lw	$ra, 0($sp)					# restore return address of the caller
 222 01dc 23BD0004		addi	$sp, $sp, 4
 223 01e0               	
 224 01e0 03E00008		jr	$ra
 225 01e4               	
 226 01e4               print_loop:
 227 01e4 11F70009		beq	$t7, $s7, print_done		# check counter for num tiles
 228 01e8               	
 229 01e8 0C00008A		jal	print_tile
 230 01ec               	
 231 01ec 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 232 01f0 3C040000		la	$a0, space					# load the address to the string
     01f4 34840000
 233 01f8 0000000C		syscall							# tell the OS to print
 234 01fc               	
 235 01fc 21EF0001		addi	$t7, $t7, 1				# increment the counter
 236 0200 21AD0004		addi	$t5, $t5, 4				# move the base pointer over
 237 0204 8DAE0000		lw	$t6, 0($t5)					# load the value of the tile
 238 0208 08000079		j	print_loop
 239 020c               	
 240 020c               print_done:
 241 020c               									# restore for print_tile
 242 020c 8FBF0000		lw	$ra, 0($sp)					# restore return address of the caller
 243 0210 23BD0004		addi	$sp, $sp, 4
 244 0214               	
 245 0214 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 246 0218 3C040000		la	$a0, new_line				# load the address to the string
     021c 34840000
 247 0220 0000000C		syscall							# tell the OS to print
 248 0224               	
 249 0224 03E00008		jr	$ra
 250 0228               	
 251 0228               print_tile:
 252 0228 11C0000C		beq	$t6, $zero, print_empty_tile	# check for null value
 253 022c               	
 254 022c 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 255 0230 3C040000		la	$a0, space					# load the address to the string
     0234 34840000
 256 0238 0000000C		syscall							# tell the OS to print
 257 023c               	
 258 023c 34020001		li 	$v0, PRINT_INT				# load the syscall code
 259 0240 01C02021		move 	$a0, $t6				# load the address to the string
 260 0244 0000000C		syscall							# tell the OS to print
 261 0248               	
 262 0248 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 263 024c 3C040000		la	$a0, space					# load the address to the string
     0250 34840000
 264 0254 0000000C		syscall							# tell the OS to print
 265 0258               	
 266 0258 03E00008		jr	$ra
 267 025c               	
 268 025c               print_empty_tile:
 269 025c 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 270 0260 3C040000		la	$a0, three_spaces			# load the address to the string
     0264 34840000
 271 0268 0000000C		syscall							# tell the OS to print
 272 026c               	
 273 026c 03E00008		jr	$ra
 274 0270               	
 275 0270               print_row_divider:
 276 0270 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 277 0274 3C040000		la	$a0, two_spaces				# load the address to the string
     0278 34840000
 278 027c 0000000C		syscall							# tell the OS to print
 279 0280               	
 280 0280 00007821		move	$t7, $zero				# count the number of tiles printed
 281 0284 080000A2		j	print_one_divider
 282 0288               	
 283 0288               print_one_divider:
 284 0288 11F70006		beq	$t7, $s7, print_div_done
 285 028c               	
 286 028c 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 287 0290 3C040000		la	$a0, single_row_separator	# load the address to the string
     0294 34840000
 288 0298 0000000C		syscall							# tell the OS to print
 289 029c               	
 290 029c 21EF0001		addi	$t7, $t7, 1				# increment the counter
 291 02a0 080000A2		j	print_one_divider
 292 02a4               	
 293 02a4               print_div_done:
 294 02a4 34020004		li 	$v0, PRINT_STRING			# load the syscall code
 295 02a8 3C040000		la	$a0, row_terminator			# load the address to the string
     02ac 34840000
 296 02b0 0000000C		syscall							# tell the OS to print
 297 02b4               	
 298 02b4 03E00008		jr	$ra


EXIT                  = 0000000A   
PRINT_INT             = 00000001   
PRINT_STRING          = 00000004   
READ_INT              = 00000005   
banner_msg              ******** XG
board_array             ******** XG
board_size              ******** XG
east_array              ******** XG
final_msg               ******** XG
four_spaces             ******** XG
impossible_puzzle       ******** XG
initial_msg             ******** XG
new_line                ******** XG
north_array             ******** XG
print_banner            00000000 R  text 
print_board             0000003C R  text 
print_div_done          000002A4 R  text 
print_done              0000020C R  text 
print_done_s            000001C8 R  text 
print_empty_e           00000150 R  text 
print_empty_tile        0000025C R  text 
print_empty_w           00000104 R  text 
print_final_puzzle      00000028 R  text 
print_initial_puzzle    00000014 R  text 
print_loop              000001E4 R  text 
print_loop_s            000001A0 R  text 
print_loop_s_init       00000198 R  text 
print_next_e            00000160 R  text 
print_next_w            00000114 R  text 
print_north_row         0000005C R  text 
print_one_divider       00000288 R  text 
print_row_divider       00000270 R  text 
print_south_row         00000088 R  text 
print_tile              00000228 R  text 
print_we_done           00000188 R  text 
print_we_loop           000000E8 R  text 
print_west_east_rows    000000B4 R  text 
row_terminator          ******** XG
single_col_separator    ******** XG
single_row_separator    ******** XG
south_array             ******** XG
space                   ******** XG
three_spaces            ******** XG
two_spaces              ******** XG
west_array              ******** XG
