   1 0000               # File:		add_ascii_numbers.asm
   2 0000               # Author:	K. Reek
   3 0000               # Contributors:	P. White, W. Carithers
   4 0000               #				Jenny Zhen
   5 0000               #
   6 0000               # Updates:
   7 0000               #		3/2004	M. Reek, named constants
   8 0000               #		10/2007 W. Carithers, alignment
   9 0000               #		09/2009 W. Carithers, separate assembly
  10 0000               #
  11 0000               # Description:	Add two ASCII numbers and store the result in ASCII.
  12 0000               #
  13 0000               # Arguments:	a0: address of parameter block.  The block consists of
  14 0000               #		four words that contain (in this order):
  15 0000               #
  16 0000               #			address of first input string
  17 0000               #			address of second input string
  18 0000               #			address where result should be stored
  19 0000               #			length of the strings and result buffer
  20 0000               #
  21 0000               #		(There is actually other data after this in the
  22 0000               #		parameter block, but it is not relevant to this routine.)
  23 0000               #
  24 0000               # Returns:	The result of the addition, in the buffer specified by
  25 0000               #		the parameter block.
  26 0000               #
  27 0000               
  28 0000               	.globl	add_ascii_numbers
  29 0000               
  30 0000               add_ascii_numbers:
  31 0000               A_FRAMESIZE = 40
  32 0000               
  33 0000               #
  34 0000               # Save registers ra and s0 - s7 on the stack.
  35 0000               #
  36 0000 23BDFFD8		addi 	$sp, $sp, -A_FRAMESIZE
  37 0004 AFBF0024		sw 	$ra, -4+A_FRAMESIZE($sp)
  38 0008 AFB7001C		sw 	$s7, 28($sp)
  39 000c AFB60018		sw 	$s6, 24($sp)
  40 0010 AFB50014		sw 	$s5, 20($sp)
  41 0014 AFB40010		sw 	$s4, 16($sp)
  42 0018 AFB3000C		sw 	$s3, 12($sp)
  43 001c AFB20008		sw 	$s2, 8($sp)
  44 0020 AFB10004		sw 	$s1, 4($sp)
  45 0024 AFB00000		sw 	$s0, 0($sp)
  46 0028               	
  47 0028               # ##### BEGIN STUDENT CODE BLOCK 1 #####
  48 0028               
  49 0028 8C900000		lw	$s0, 0($a0)		# 1st input; s0 = address at 0 bits of offset from a0
  50 002c 8C910004		lw	$s1, 4($a0)		# 2nd input; s0 = address at 4 bits of offset from a0
  51 0030 8C920008		lw	$s2, 8($a0)		# storage of result; s0 = address at 8 bits of offset from a0
  52 0034 8C93000C		lw	$s3, 12($a0)	# length; s0 = address at 12 bits of offset from a0
  53 0038 34190000		li	$t9, 0			# set the carry value to 0
  54 003c 2418FFD0		li	$t8, -48		# set the ascii offset to -48 (48 represents 0 in ascii)
  55 0040 340F003A		li	$t7, 58			# set the overflow ascii value (58 represents 10 in ascii)
  56 0044               	
  57 0044               add_loop:
  58 0044 12600012		beq	$s3, $zero, done	# go to done, if length of input is zero
  59 0048 2273FFFF		addi $s3, $s3, -1		# decrement the counter for the number of digits left
  60 004c 02134020		add	$t0, $s0, $s3		# get the address of the next 'digit' of 1st input
  61 0050 02334820		add $t1, $s1, $s3		# get the address of the next 'digit' of 2nd input
  62 0054 810A0000		lb	$t2, 0($t0)			# t2 = next digit of 1st input
  63 0058 812B0000		lb	$t3, 0($t1)			# t3 = next digit of 2nd input
  64 005c 014B6020		add $t4, $t2, $t3		# t4 = digit of 1st input + digit of 2nd input
  65 0060 01996020		add	$t4, $t4, $t9		# t4 = sum of digits + carry
  66 0064 01986020		add $t4, $t4, $t8		# t4 = sum of digits + carry + offset
  67 0068 34190000		li	$t9, 0				# reset value of carry to 0
  68 006c 01EC682A		slt	$t5, $t7, $t4		# 58 < t4; t4 >= 58 => 1; check for overflow
  69 0070 15A00001		bne	$t5, $zero, carry	# if t5 !=0; if t5 == 1; if overflow, go to carry
  70 0074 08000021		j	store_sum			# store the result, with no overflow
  71 0078               
  72 0078               carry:
  73 0078 218CFFF6		addi	$t4, $t4, -10	# remove the carry from the sum
  74 007c 34190001		li		$t9, 1			# set the carry
  75 0080 08000021		j		store_sum		# store the result, after modifying for carry
  76 0084               	
  77 0084               store_sum:
  78 0084 02537020		add	$t6, $s2, $s3		# get the address of the next 'digit' of the result
  79 0088 A1CC0000		sb	$t4, 0($t6)			# store the result of the sum of the input for the 'digit'
  80 008c 08000011		j	add_loop			# loop to get sum of next pair of 'digits'
  81 0090               
  82 0090               done:
  83 0090               
  84 0090               # ###### END STUDENT CODE BLOCK 1 ######
  85 0090               
  86 0090               #
  87 0090               # Restore registers ra and s0 - s7 from the stack.
  88 0090               #
  89 0090 8FBF0024		lw 	$ra, -4+A_FRAMESIZE($sp)
  90 0094 8FB7001C		lw 	$s7, 28($sp)
  91 0098 8FB60018		lw 	$s6, 24($sp)
  92 009c 8FB50014		lw 	$s5, 20($sp)
  93 00a0 8FB40010		lw 	$s4, 16($sp)
  94 00a4 8FB3000C		lw 	$s3, 12($sp)
  95 00a8 8FB20008		lw 	$s2, 8($sp)
  96 00ac 8FB10004		lw 	$s1, 4($sp)
  97 00b0 8FB00000		lw 	$s0, 0($sp)
  98 00b4 23BD0028		addi 	$sp, $sp, A_FRAMESIZE
  99 00b8               
 100 00b8 03E00008		jr	$ra			# Return to the caller.


A_FRAMESIZE        = 00000028   
add_ascii_numbers    00000000 RG text 
add_loop             00000044 R  text 
carry                00000078 R  text 
done                 00000090 R  text 
store_sum            00000084 R  text 
